/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useCallback, useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from "three";

import { GLB_ASSET_URLS } from "@/js/core/constants";
import { Box } from "../Common";

export default function SkullModel(props) {
    const [mounted, setMounted] = useState(false);
    const group = useRef();
    const { nodes, materials, animations } = useGLTF(GLB_ASSET_URLS.Skull);
    const { actions, names } = useAnimations(animations, group);

    const handleClick = useCallback(() => {
        actions?.jaw.reset().play();
    }, [actions]);

    useEffect(() => {
        if (!mounted) return;
        if (Object.keys(actions).length === 0) return;
        names.forEach((name) => {
            const action = actions[name];
            switch (name) {
                case "skull_orbit":
                    action.play();
                    break;
                case "jaw":
                    action.loop = THREE.LoopOnce;
                    break;
                default:
                    break;
            }
        });
    }, [mounted, actions, names]);

    useEffect(() => {
        setMounted(true);
    }, []);
    return (
        <Box {...props}>
            <group ref={group} dispose={null} onClick={handleClick}>
                <group name="Scene">
                    <group name="skull">
                        <group name="rotation_null014">
                            <mesh
                                name="skull001"
                                castShadow
                                receiveShadow
                                geometry={nodes.skull001.geometry}
                                material={nodes.skull001.material}
                                position={[-0.004, -0.114, -0.039]}
                            />
                            <mesh
                                name="skull002"
                                castShadow
                                receiveShadow
                                geometry={nodes.skull002.geometry}
                                material={nodes.skull002.material}
                                position={[-0.006, -0.152, 0.2]}
                            >
                                <mesh
                                    name="sockets"
                                    castShadow
                                    receiveShadow
                                    geometry={nodes.sockets.geometry}
                                    material={nodes.sockets.material}
                                />
                            </mesh>
                        </group>
                    </group>
                </group>
            </group>
        </Box>
    );
}

useGLTF.preload(GLB_ASSET_URLS.Skull);
