/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useCallback, useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from "three";

import { GLB_ASSET_URLS } from "@/js/core/constants";
import { GrainMaterialRed } from "../Materials";

export default function EpbModel(props) {
    const [mounted, setMounted] = useState(false);
    const [boundingBox, setBoundingBox] = useState({
        min: new THREE.Vector3(0, 0, 0),
        max: new THREE.Vector3(1, 1, 1),
    });
    const group = useRef();
    const { nodes, animations } = useGLTF(GLB_ASSET_URLS.EPB);
    const { actions, names } = useAnimations(animations, group);

    const handleClick = useCallback(() => {
        actions?.bolt.reset().play();
    }, [actions]);

    useEffect(() => {
        if (!mounted) return;
        if (Object.keys(actions).length === 0) return;
        names.forEach((name) => {
            const action = actions[name];
            switch (name) {
                case "epb_orbit":
                    action.play();
                    break;
                case "bolt":
                    action.loop = THREE.LoopOnce;
                    break;
                default:
                    break;
            }
        });
    }, [mounted, actions, names]);

    // setup uniforms
    useEffect(() => {
        const bb = new THREE.Box3();
        bb.setFromObject(group.current);
        setBoundingBox(bb);
    }, []);

    useEffect(() => {
        setMounted(true);
    }, []);
    return (
        <group ref={group} {...props} dispose={null} onClick={handleClick}>
            <group name="Scene">
                <group name="epb">
                    <group name="rotation_null013">
                        <mesh
                            name="bolt001"
                            castShadow
                            receiveShadow
                            geometry={nodes.bolt001.geometry}
                            // material={nodes.bolt001.material}
                            morphTargetDictionary={
                                nodes.bolt001.morphTargetDictionary
                            }
                            morphTargetInfluences={
                                nodes.bolt001.morphTargetInfluences
                            }
                            position={[-0.024, 0.093, 0.006]}
                        >
                            <GrainMaterialRed boundingBox={boundingBox} />
                        </mesh>
                    </group>
                </group>
            </group>
        </group>
    );
}

useGLTF.preload(GLB_ASSET_URLS.EPB);
