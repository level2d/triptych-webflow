/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useCallback, useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from "three";

import { GLB_ASSET_URLS } from "@/js/core/constants";
import {
    GrainMaterialYellow,
    GrainMaterialYellowDark,
} from "@/js/components/3D/Materials";
import { Outlines } from "../Common";

export default function ContactModel(props) {
    const [mounted, setMounted] = useState(false);
    const [boundingBox, setBoundingBox] = useState({
        min: new THREE.Vector3(0, 0, 0),
        max: new THREE.Vector3(1, 1, 1),
    });
    const group = useRef();
    const { nodes, animations } = useGLTF(GLB_ASSET_URLS.Contact);
    const { actions, names } = useAnimations(animations, group);

    const handleClick = useCallback(() => {
        actions?.ufo_01.reset().play();
        actions?.ufo_02.reset().play();
    }, [actions]);

    useEffect(() => {
        if (!mounted) return;
        if (Object.keys(actions).length === 0) return;
        names.forEach((name) => {
            const action = actions[name];
            switch (name) {
                case "contact_orbit":
                    action.play();
                    break;
                case "ufo_01":
                case "ufo_02":
                    action.clampWhenFinished = true; // stay on last frame
                    action.setLoop(THREE.LoopRepeat);
                    action.repetitions = 1;
                    break;
                default:
                    break;
            }
        });
    }, [mounted, actions, names]);

    // setup uniforms
    useEffect(() => {
        const bb = new THREE.Box3();
        bb.setFromObject(group.current);
        setBoundingBox(bb);
    }, []);

    useEffect(() => {
        setMounted(true);
    }, []);
    return (
        <group ref={group} {...props} dispose={null} onClick={handleClick}>
            <group name="Scene">
                <group name="contact">
                    <group name="rotation_null">
                        <mesh
                            name="ufo002"
                            castShadow
                            receiveShadow
                            geometry={nodes.ufo002.geometry}
                            material={nodes.ufo002.material}
                            morphTargetDictionary={
                                nodes.ufo002.morphTargetDictionary
                            }
                            morphTargetInfluences={
                                nodes.ufo002.morphTargetInfluences
                            }
                            position={[0.001, 0.059, 0.028]}
                            rotation={[-0.087, Math.PI / 6, 0]}
                        >
                            <GrainMaterialYellow boundingBox={boundingBox} />
                            <mesh
                                name="thruster"
                                castShadow
                                receiveShadow
                                geometry={nodes.thruster.geometry}
                                material={nodes.thruster.material}
                                morphTargetDictionary={
                                    nodes.thruster.morphTargetDictionary
                                }
                                morphTargetInfluences={
                                    nodes.thruster.morphTargetInfluences
                                }
                            >
                                <GrainMaterialYellowDark
                                    boundingBox={boundingBox}
                                />
                            </mesh>
                            <mesh
                                name="windows"
                                castShadow
                                receiveShadow
                                geometry={nodes.windows.geometry}
                                material={nodes.windows.material}
                                morphTargetDictionary={
                                    nodes.windows.morphTargetDictionary
                                }
                                morphTargetInfluences={
                                    nodes.windows.morphTargetInfluences
                                }
                            >
                                <GrainMaterialYellow
                                    boundingBox={boundingBox}
                                />
                            </mesh>
                        </mesh>
                    </group>
                </group>
            </group>
        </group>
    );
}

useGLTF.preload(GLB_ASSET_URLS.Contact);
